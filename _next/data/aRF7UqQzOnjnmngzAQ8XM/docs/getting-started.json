{"pageProps":{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\",\n      h2: \"h2\",\n      img: \"img\",\n      pre: \"pre\",\n      code: \"code\",\n      span: \"span\",\n      h3: \"h3\"\n    }, _provideComponents(), props.components), {Note, Disclosure, Warning, Info} = _components;\n    if (!Disclosure) _missingMdxReference(\"Disclosure\", true);\n    if (!Info) _missingMdxReference(\"Info\", true);\n    if (!Note) _missingMdxReference(\"Note\", true);\n    if (!Warning) _missingMdxReference(\"Warning\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(Note, {\n        label: \"In Development\",\n        children: [_jsx(_components.p, {\n          children: \"Cord.js is currently highly in development.\\nA lot of stuff is missing and the documentation is incomplete.\"\n        }), _jsx(_components.p, {\n          children: \"A lot of APIs are subject to change, and the docs might not be up-to date.\"\n        }), _jsxs(_components.p, {\n          children: [\"Any bugs that you may find, please report them in the \", _jsx(_components.a, {\n            href: \"https://github.com/lukadev-0/cord.js/issues\",\n            children: \"issue tracker\"\n          }), \".\"]\n        })]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Creating the bot\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"We first need to create the bot itself on the \", _jsx(_components.a, {\n          href: \"https://discord.com/developers/applications\",\n          children: \"Discord Developer Portal\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(Disclosure, {\n        label: \"Instructions\",\n        children: [_jsxs(_components.p, {\n          children: [\"Press the \\\"New Application\\\" button\\n\", _jsx(_components.img, {\n            src: \"/getting-started/Applications.png\",\n            alt: \"\"\n          })]\n        }), _jsxs(_components.p, {\n          children: [\"Enter in an application name and press \\\"Create\\\"\\n\", _jsx(_components.img, {\n            src: \"/getting-started/CreateApplication.png\",\n            alt: \"\"\n          })]\n        }), _jsxs(_components.p, {\n          children: [\"Go to the \\\"Bot\\\" tab and press \\\"Add Bot\\\"\\n\", _jsx(_components.img, {\n            src: \"/getting-started/AddBot.png\",\n            alt: \"\"\n          })]\n        }), _jsxs(_components.p, {\n          children: [\"And then copy the token as we are going to need it.\\n\", _jsx(_components.img, {\n            src: \"/getting-started/CopyToken.png\",\n            alt: \"\"\n          })]\n        }), _jsxs(Warning, {\n          children: [_jsx(_components.p, {\n            children: \"The token is like your bot's password, anyone with the token can login as your bot.\"\n          }), _jsx(_components.p, {\n            children: \"It is really important to keep your bot's token secret.\"\n          })]\n        })]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Setting up the project\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"First, we need to initialize our project.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-sh\",\n          children: [\"$ \", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"mkdir\"\n          }), \" my-cool-bot && \", _jsx(_components.span, {\n            className: \"hljs-built_in\",\n            children: \"cd\"\n          }), \" my-cool-bot  \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"# create a new folder and cd into it\"\n          }), \"\\n$ npm init -y                          \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"# create a package.json\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Add the following to your \", _jsx(_components.code, {\n          children: \"package.json\"\n        }), \" to support ES Modules (\", _jsx(_components.code, {\n          children: \"import\"\n        }), \"/\", _jsx(_components.code, {\n          children: \"export\"\n        }), \")\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-json\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"\\\"type\\\"\"\n          }), _jsx(_components.span, {\n            className: \"hljs-punctuation\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"module\\\"\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Now, we'll need to install the required packages.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"hljs language-sh\",\n          children: \"$ npm install @cordjs/bot @cordjs/gateway\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"@cordjs/bot\"\n        }), \" package will manage our bot, \", _jsx(_components.a, {\n          href: \"/docs/middleware\",\n          children: \"middleware\"\n        }), \" and \", _jsx(_components.a, {\n          href: \"/docs/plugins\",\n          children: \"plugins\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"@cordjs/gateway\"\n        }), \" package is what's known as a \", _jsx(_components.a, {\n          href: \"/docs/plugins\",\n          children: \"plugin\"\n        }), \", it will\\nhandle connecting to the \", _jsx(_components.a, {\n          href: \"https://discord.com/developers/docs/topics/gateway\",\n          children: \"Discord gateway\"\n        }), \" and\\nallow us to listen to events such as \", _jsx(_components.code, {\n          children: \"messageCreate\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Coding the bot\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Let's get coding!\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Instantiating the bot instance\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Create a file called \", _jsx(_components.code, {\n          children: \"index.js\"\n        }), \" with the following code:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-js\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"Cord\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"from\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"'@cordjs/bot'\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"Gateway\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"from\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"'@cordjs/gateway'\"\n          }), \"\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"const\"\n          }), \" bot = \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"Cord\"\n          }), \"([\\n  \", _jsx(_components.span, {\n            className: \"hljs-title class_\",\n            children: \"Gateway\"\n          }), \"({\\n    \", _jsx(_components.span, {\n            className: \"hljs-attr\",\n            children: \"token\"\n          }), \": \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"'<YOUR_TOKEN_HERE>'\"\n          }), \",\\n  }),\\n])\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"This code will create a Cord.js Bot with the \", _jsx(_components.code, {\n          children: \"Gateway\"\n        }), \" plugin.\"]\n      }), \"\\n\", _jsxs(Note, {\n        children: [_jsx(_components.p, {\n          children: \"The token should be kept secret.\"\n        }), _jsxs(_components.p, {\n          children: [\"It is recommended to store your token in a \", _jsx(_components.code, {\n            children: \".env\"\n          }), \" file and add it to your \", _jsx(_components.code, {\n            children: \".gitignore\"\n          }), \".\\nAnd use the \", _jsx(_components.a, {\n            href: \"https://npmjs.com/package/dotenv\",\n            children: _jsx(_components.code, {\n              children: \"dotenv\"\n            })\n          }), \" package to load your .env file.\"]\n        })]\n      }), \"\\n\", _jsx(Info, {\n        children: _jsx(_components.p, {\n          children: \"You might've noticed that we didn't pass any intents.\\nThis is because Cord.js will automatically detect the required intents for you.\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Adding middleware\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Now we need to use \", _jsx(_components.a, {\n          href: \"/docs/middleware\",\n          children: \"middleware\"\n        }), \" so we can listen\\nto new messages that are sent.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-js\",\n          children: [\"bot.\", _jsx(_components.span, {\n            className: \"hljs-property\",\n            children: \"gateway\"\n          }), \".\", _jsx(_components.span, {\n            className: \"hljs-title function_\",\n            children: \"messageCreate\"\n          }), \"(\", _jsxs(_components.span, {\n            className: \"hljs-function\",\n            children: [\"(\", _jsx(_components.span, {\n              className: \"hljs-params\",\n              children: \"context\"\n            }), \") =>\"]\n          }), \" {\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"const\"\n          }), \" { message } = context.\", _jsx(_components.span, {\n            className: \"hljs-property\",\n            children: \"data\"\n          }), \"\\n\\n  \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" (message.\", _jsx(_components.span, {\n            className: \"hljs-property\",\n            children: \"content\"\n          }), \" === \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"'hello cord.js'\"\n          }), \") {\\n    message.\", _jsx(_components.span, {\n            className: \"hljs-title function_\",\n            children: \"reply\"\n          }), \"(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"'Hello World! :wave:'\"\n          }), \")\\n  }\\n})\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"context\"\n        }), \" parameter has information about the event.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"context.data\"\n        }), \" property has the data of the event,\\nsuch as the message.\\nIt's an object containing the parameters from \", _jsx(_components.a, {\n          href: \"https://discord.js\",\n          children: \"Discord.js\"\n        }), \", so we can\\nuse destructuring to get the message.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Check the \", _jsx(_components.a, {\n          href: \"https://discord.js.org/#/docs/discord.js/stable/class/Client?scrollTo=e-apiRequest\",\n          children: \"Discord.js documentation\"\n        }), \"\\nfor a list of events and the parameters that are passed to them.\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Starting the bot\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"We will need to start the bot in order for it to come online.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-js\",\n          children: [\"bot.\", _jsx(_components.span, {\n            className: \"hljs-title function_\",\n            children: \"start\"\n          }), \"()\\n\"]\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Running the bot\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Lets run the bot!\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-sh\",\n          children: [\"$ node .   \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"# runs the index.js file\"\n          }), \"\\n\"]\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Add the bot to a server and say \", _jsx(_components.code, {\n          children: \"hello cord.js\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If everything went well, it should respond with \", _jsx(_components.code, {\n          children: \"Hello World! 👋\"\n        }), \".\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"title":"Getting Started","description":"Learn how to write a Discord bot using Cord.js.","slug":"getting-started"},"scope":{}},"headings":[{"text":"Creating the bot","level":2},{"text":"Setting up the project","level":2},{"text":"Coding the bot","level":2},{"text":"Instantiating the bot instance","level":3},{"text":"Adding middleware","level":3},{"text":"Starting the bot","level":3},{"text":"Running the bot","level":2}]},"__N_SSG":true}