{"pageProps":{"kind":"TypeAlias","packageName":"@cordjs/gateway","data":{"summary":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.a, {\n        href: \"/api-reference/gateway/IGatewayOptions/intents\",\n        children: \"intents\"\n      }), \" option\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"description":"The [intents](/api-reference/gateway/IGatewayOptions/intents) option","remarks":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Determines what \", _jsx(_components.a, {\n          href: \"https://discord.com/developers/docs/topics/gateway#gateway-intents\",\n          children: \"intents\"\n        }), \" to use.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If set to a \", _jsx(_components.a, {\n          href: \"https://discord.js.org/#/docs/discord.js/main/typedef/IntentsResolvable\",\n          children: \"IntentsResolvable\"\n        }), \" it will be used as the intents.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If set to \", _jsx(_components.code, {\n          children: \"'auto'\"\n        }), \", it will automatically detect the intents based on middleware.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If set to an object, it will use \", _jsx(_components.code, {\n          children: \"'auto'\"\n        }), \", but you are able to configure the intents for \", _jsx(_components.code, {\n          children: \"threadMembersUpdate\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"typingStart\"\n        }), \" as they will not have an intent by default.\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"name":"GatewayIntentsOption","type":["BitFieldResolvable","<","GatewayIntentsString",", number> | 'auto' | {\n    threadMembersUpdate?: 'guild' | 'member' | 'both';\n    typingStart?: 'guild' | 'dm' | 'both';\n}"]},"breadcrumbs":["GatewayIntentsOption"]},"__N_SSG":true}