{"pageProps":{"slug":"getting-started","content":":::note[In Development]\n\nCord.js is currently highly in development.\nA lot of stuff is missing and the documentation is incomplete.\n\nAny bugs that you may find, please report them in the [issue tracker](https://github.com/lukadev-0/cord.js/issues).\n\n:::\n\n## Creating the bot\n\nWe first need to create the bot itself on the [Discord Developer Portal](https://discord.com/developers/applications).\n\n::::details[Creating a bot]\n\nPress the \"New Application\" button\n\n![](/getting-started/Applications.png)\n\\\nEnter in an application name and press \"Create\"\n![](/getting-started/CreateApplication.png)\n\\\nGo to the \"Bot\" tab and press \"Add Bot\"\n![](/getting-started/AddBot.png)\n\\\nAnd then copy the token as we are going to need it.\n![](/getting-started/CopyToken.png)\n\n:::warning\n\nThe token is a secret, so it should be kept secret.\n\nAnyone with the token can access your bot, and call any Discord API.\n\n:::\n\n::::\n\n## Setting up the project\n\nFirst, we need to initialize our project.\n\n```sh\n$ mkdir my-cool-bot && cd my-cool-bot  # create a new folder and cd into it\n$ npm init -y                          # create a package.json\n\n# for yarn users:\n$ yarn init -y\n```\n\nNow, we'll need to install the required packages.\n\n```sh\n$ npm install @cordjs/bot @cordjs/gateway\n\n# for yarn users:\n$ yarn add @cordjs/bot @cordjs/gateway\n```\n\nThe `@cordjs/bot` package will manage our bot, middleware and plugins.\n\nThe `@cordjs/gateway` package is what's known as a [plugin](/docs/plugins), it will\nhandle connecting to the [Discord gateway](https://discord.com/developers/docs/topics/gateway) and\nallow us to listen to events such as `messageCreate`.\n\n## Coding the bot\n\nLet's get started coding!\n\n### Instantiating the bot instance\n\nCreate a file called `index.js` with the following code:\n\n```js\nimport Cord from '@cordjs/bot'\nimport Gateway from '@cordjs/gateway'\n\n// Using CommonJS\n// const Cord = require(\"@cordjs/bot\")\n// const Gateway = require\"(\"@cordjs/gateway\")\n\nconst bot = Cord([\n  Gateway({\n    token: '<YOUR_TOKEN_HERE>',\n    client: {\n      intents: ['GUILDS', 'GUILD_MESSAGES'],\n    },\n  }),\n])\n```\n\nThis code will create a Cord.js Bot with the `Gateway` plugin.\n\n:::note\n\nThe token should be kept secret.\n\nIt is recommended to store your token in a `.env` file and add it to your `.gitignore`.\nAnd use the [`dotenv`](https://npmjs.com/package/dotenv) package to load your .env file.\n\n:::\n\n### Adding middleware\n\nNow we need to use [middleware](/docs/middleware) so we can detect\nwhenever a message has been sent.\n\nPut the following code after the previous code:\n\n```js\nbot.gateway.messageCreate((context) => {\n  const [message] = context.data\n\n  if (message.content === 'hello cord.js') {\n    message.reply('Hello World! :wave:')\n  }\n})\n```\n\nThe `context` parameter has information about the event.\n\nThe `context.data` property has the data of the event,\nsuch as the message.\nIt's an array containing the parameters from [Discord.js](https://discord.js), so we can\nuse destructuring to get the message.\n\nCheck the [Discord.js documentation](https://discord.js.org/#/docs/discord.js/stable/class/Client?scrollTo=e-apiRequest)\nfor a list of events and the parameters that are passed to them.\n\n## Running the bot\n\nLets run the bot!\n\n```sh\n$ node .   # runs the index.js file\n```\n\nAdd the bot to a server and say `hello cord.js`.\n\nIf everything went well, it should respond with `Hello World! ðŸ‘‹`.\n","metadata":{"title":"Getting Started","description":"Learn how to write a Discord bot using Cord.js.","slug":"getting-started"}},"__N_SSG":true}